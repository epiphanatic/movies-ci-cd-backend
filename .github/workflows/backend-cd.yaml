name: Backend Continuous Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PYTHON_VERSION: '3.10'

jobs:
  # note lint and test are run in parallel
  # build waits / needs both to be completed first
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{env.PYTHON_VERSION}}

  #     - name: Install dependencies
  #       run: |
  #         pip install pipenv
  #         pipenv install --dev
  #         pipenv run lint

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies
  #       run: |
  #         pip install pipenv
  #         pipenv install --dev
  #         pipenv run test

  build:
    runs-on: ubuntu-latest
    # needs: [lint, test]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --dev 
          pipenv run test

      # There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR.
      # (using 3rd party actions) The ECR login step should also be accessing Github Secrets for credentials. (secure approach)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      #  i don't actually know what this is or does but it was in the class example.
      #  i would think the above step would be enough to login to ECR
      # - name: Login to container registry
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.REGISTRY_USERNAME }} 
      #     password: ${{ secrets.REGISTRY_PASSWORD }}

      # There should be a step that pushes the docker image to ECR in the AWS account.

      # There should be a step that deploys the application using kubectl to the kubernetes cluster

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: 473659653982.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v2
      #   with:
      #     version: 'latest'

      # - name: Deploy to Kubernetes
      #   # i don't know what kubeconfig is, ie which file in k8s
      #   run: |
      #     echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
      #     kubectl apply -f k8s/ --kubeconfig=kubeconfig.yaml
